{
  "variables": [],
  "info": {
    "name": "Conduit API Tests",
    "_postman_id": "dda3e595-02d7-bf12-2a43-3daea0970192",
    "description": "Collection for testing the Conduit API\n\nhttps://github.com/gothinkster/realworld",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Jobs with authentication",
      "description": "",
      "item": [
        {
          "name": "Feed",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"jobs\" property'] = responseJSON.hasOwnProperty('jobs');",
                  "    tests['Response contains \"jobsCount\" property'] = responseJSON.hasOwnProperty('jobsCount');",
                  "    tests['jobsCount is an integer'] = Number.isInteger(responseJSON.jobsCount);",
                  "",
                  "    if(responseJSON.jobs.length){",
                  "        var job = responseJSON.jobs[0];",
                  "",
                  "        tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "        tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "        tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "        tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "        tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "        tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "        tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "        tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "        tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "        tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "        tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "        tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "        tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "    } else {",
                  "        tests['jobsCount is 0 when feed is empty'] = responseJSON.jobsCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/jobs/feed",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "All Jobs",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"jobs\" property'] = responseJSON.hasOwnProperty('jobs');",
                  "    tests['Response contains \"jobsCount\" property'] = responseJSON.hasOwnProperty('jobsCount');",
                  "    tests['jobsCount is an integer'] = Number.isInteger(responseJSON.jobsCount);",
                  "",
                  "    if(responseJSON.jobs.length){",
                  "        var job = responseJSON.jobs[0];",
                  "",
                  "        tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "        tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "        tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "        tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "        tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "        tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "        tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "        tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "        tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "        tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "        tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "        tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "        tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "    } else {",
                  "        tests['jobsCount is 0 when feed is empty'] = responseJSON.jobsCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/jobs",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "All Jobs with auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"jobs\" property'] = responseJSON.hasOwnProperty('jobs');",
                  "    tests['Response contains \"jobsCount\" property'] = responseJSON.hasOwnProperty('jobsCount');",
                  "    tests['jobsCount is an integer'] = Number.isInteger(responseJSON.jobsCount);",
                  "",
                  "    if(responseJSON.jobs.length){",
                  "        var job = responseJSON.jobs[0];",
                  "",
                  "        tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "        tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "        tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "        tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "        tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "        tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "        tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "        tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "        tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "        tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "        tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "        tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "        tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "    } else {",
                  "        tests['jobsCount is 0 when feed is empty'] = responseJSON.jobsCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/jobs",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Jobs by Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"jobs\" property'] = responseJSON.hasOwnProperty('jobs');",
                  "    tests['Response contains \"jobsCount\" property'] = responseJSON.hasOwnProperty('jobsCount');",
                  "    tests['jobsCount is an integer'] = Number.isInteger(responseJSON.jobsCount);",
                  "",
                  "    if(responseJSON.jobs.length){",
                  "        var job = responseJSON.jobs[0];",
                  "",
                  "        tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "        tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "        tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "        tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "        tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "        tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "        tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "        tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "        tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "        tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "        tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "        tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "        tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "    } else {",
                  "        tests['jobsCount is 0 when feed is empty'] = responseJSON.jobsCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/jobs?author=johnjacob",
              "host": ["{{apiUrl}}"],
              "path": ["jobs"],
              "query": [
                {
                  "key": "author",
                  "value": "johnjacob"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Jobs by Author with auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"jobs\" property'] = responseJSON.hasOwnProperty('jobs');",
                  "    tests['Response contains \"jobsCount\" property'] = responseJSON.hasOwnProperty('jobsCount');",
                  "    tests['jobsCount is an integer'] = Number.isInteger(responseJSON.jobsCount);",
                  "",
                  "    if(responseJSON.jobs.length){",
                  "        var job = responseJSON.jobs[0];",
                  "",
                  "        tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "        tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "        tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "        tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "        tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "        tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "        tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "        tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "        tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "        tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "        tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "        tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "        tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "    } else {",
                  "        tests['jobsCount is 0 when feed is empty'] = responseJSON.jobsCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/jobs?author=johnjacob",
              "host": ["{{apiUrl}}"],
              "path": ["jobs"],
              "query": [
                {
                  "key": "author",
                  "value": "johnjacob",
                  "equals": true,
                  "description": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Jobs Favorited by Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "    ",
                  "    tests['Response contains \"jobs\" property'] = responseJSON.hasOwnProperty('jobs');",
                  "    tests['Response contains \"jobsCount\" property'] = responseJSON.hasOwnProperty('jobsCount');",
                  "    tests['jobsCount is an integer'] = Number.isInteger(responseJSON.jobsCount);",
                  "",
                  "    if(responseJSON.jobs.length){",
                  "        var job = responseJSON.jobs[0];",
                  "",
                  "        tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "        tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "        tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "        tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "        tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "        tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "        tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "        tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "        tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "        tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "        tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "        tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "        tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "    } else {",
                  "        tests['jobsCount is 0 when feed is empty'] = responseJSON.jobsCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/jobs?favorited=jane",
              "host": ["{{apiUrl}}"],
              "path": ["jobs"],
              "query": [
                {
                  "key": "favorited",
                  "value": "jane"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Jobs Favorited by Username with auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "    ",
                  "    tests['Response contains \"jobs\" property'] = responseJSON.hasOwnProperty('jobs');",
                  "    tests['Response contains \"jobsCount\" property'] = responseJSON.hasOwnProperty('jobsCount');",
                  "    tests['jobsCount is an integer'] = Number.isInteger(responseJSON.jobsCount);",
                  "",
                  "    if(responseJSON.jobs.length){",
                  "        var job = responseJSON.jobs[0];",
                  "",
                  "        tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "        tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "        tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "        tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "        tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "        tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "        tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "        tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "        tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "        tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "        tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "        tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "        tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "    } else {",
                  "        tests['jobsCount is 0 when feed is empty'] = responseJSON.jobsCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/jobs?favorited=jane",
              "host": ["{{apiUrl}}"],
              "path": ["jobs"],
              "query": [
                {
                  "key": "favorited",
                  "value": "jane"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Jobs by Tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"jobs\" property'] = responseJSON.hasOwnProperty('jobs');",
                  "    tests['Response contains \"jobsCount\" property'] = responseJSON.hasOwnProperty('jobsCount');",
                  "    tests['jobsCount is an integer'] = Number.isInteger(responseJSON.jobsCount);",
                  "",
                  "    if(responseJSON.jobs.length){",
                  "        var job = responseJSON.jobs[0];",
                  "",
                  "        tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "        tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "        tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "        tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "        tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "        tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "        tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "        tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "        tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "        tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "        tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "        tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "        tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "    } else {",
                  "        tests['jobsCount is 0 when feed is empty'] = responseJSON.jobsCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/jobs?tag=dragons",
              "host": ["{{apiUrl}}"],
              "path": ["jobs"],
              "query": [
                {
                  "key": "tag",
                  "value": "dragons"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"job\" property'] = responseJSON.hasOwnProperty('job');",
                  "",
                  "var job = responseJSON.job || {};",
                  "",
                  "tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "if(tests['Job has \"slug\" property']){",
                  "    postman.setEnvironmentVariable('slug', job.slug);",
                  "}",
                  "tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/jobs",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"job\":{\"title\":\"How to train your dragon\", \"description\":\"Ever wonder how?\", \"body\":\"Very carefully.\", \"tagList\":[\"dragons\",\"training\"]}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Single Job by slug",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"job\" property'] = responseJSON.hasOwnProperty('job');",
                  "",
                  "var job = responseJSON.job || {};",
                  "",
                  "tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/jobs/{{slug}}",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Update Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"job\" property'] = responseJSON.hasOwnProperty('job');",
                  "",
                  "var job = responseJSON.job || {};",
                  "",
                  "tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/jobs/{{slug}}",
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"job\":{\"body\":\"With two hands\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Favorite Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"job\" property'] = responseJSON.hasOwnProperty('job');",
                  "",
                  "var job = responseJSON.job || {};",
                  "",
                  "tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "tests[\"Job's 'favorited' property is true\"] = job.favorited === true;",
                  "tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "tests[\"Job's 'favoritesCount' property is greater than 0\"] = job.favoritesCount > 0;",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/jobs/{{slug}}/favorite",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Unfavorite Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"job\" property'] = responseJSON.hasOwnProperty('job');",
                  "",
                  "var job = responseJSON.job || {};",
                  "",
                  "tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "tests[\"Job's \\\"favorited\\\" property is true\"] = job.favorited === false;",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/jobs/{{slug}}/favorite",
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Jobs",
      "description": "",
      "item": [
        {
          "name": "All Jobs",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"jobs\" property'] = responseJSON.hasOwnProperty('jobs');",
                  "    tests['Response contains \"jobsCount\" property'] = responseJSON.hasOwnProperty('jobsCount');",
                  "    tests['jobsCount is an integer'] = Number.isInteger(responseJSON.jobsCount);",
                  "",
                  "    if(responseJSON.jobs.length){",
                  "        var job = responseJSON.jobs[0];",
                  "",
                  "        tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "        tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "        tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "        tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "        tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "        tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "        tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "        tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "        tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "        tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "        tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "        tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "        tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "    } else {",
                  "        tests['jobsCount is 0 when feed is empty'] = responseJSON.jobsCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/jobs",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Jobs by Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"jobs\" property'] = responseJSON.hasOwnProperty('jobs');",
                  "    tests['Response contains \"jobsCount\" property'] = responseJSON.hasOwnProperty('jobsCount');",
                  "    tests['jobsCount is an integer'] = Number.isInteger(responseJSON.jobsCount);",
                  "",
                  "    if(responseJSON.jobs.length){",
                  "        var job = responseJSON.jobs[0];",
                  "",
                  "        tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "        tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "        tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "        tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "        tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "        tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "        tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "        tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "        tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "        tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "        tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "        tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "        tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "    } else {",
                  "        tests['jobsCount is 0 when feed is empty'] = responseJSON.jobsCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/jobs?author=johnjacob",
              "host": ["{{apiUrl}}"],
              "path": ["jobs"],
              "query": [
                {
                  "key": "author",
                  "value": "johnjacob"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Jobs Favorited by Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "    ",
                  "    tests['Response contains \"jobs\" property'] = responseJSON.hasOwnProperty('jobs');",
                  "    tests['Response contains \"jobsCount\" property'] = responseJSON.hasOwnProperty('jobsCount');",
                  "    tests['jobsCount is an integer'] = Number.isInteger(responseJSON.jobsCount);",
                  "",
                  "    if(responseJSON.jobs.length){",
                  "        var job = responseJSON.jobs[0];",
                  "",
                  "        tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "        tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "        tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "        tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "        tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "        tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "        tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "        tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "        tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "        tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "        tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "        tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "        tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "    } else {",
                  "        tests['jobsCount is 0 when feed is empty'] = responseJSON.jobsCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/jobs?favorited=jane",
              "host": ["{{apiUrl}}"],
              "path": ["jobs"],
              "query": [
                {
                  "key": "favorited",
                  "value": "jane"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Jobs by Tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"jobs\" property'] = responseJSON.hasOwnProperty('jobs');",
                  "    tests['Response contains \"jobsCount\" property'] = responseJSON.hasOwnProperty('jobsCount');",
                  "    tests['jobsCount is an integer'] = Number.isInteger(responseJSON.jobsCount);",
                  "",
                  "    if(responseJSON.jobs.length){",
                  "        var job = responseJSON.jobs[0];",
                  "",
                  "        tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "        tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "        tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "        tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "        tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "        tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "        tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "        tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "        tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "        tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "        tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "        tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "        tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  "    } else {",
                  "        tests['jobsCount is 0 when feed is empty'] = responseJSON.jobsCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/jobs?tag=dragons",
              "host": ["{{apiUrl}}"],
              "path": ["jobs"],
              "query": [
                {
                  "key": "tag",
                  "value": "dragons"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Single Job by slug",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"job\" property'] = responseJSON.hasOwnProperty('job');",
                  "",
                  "var job = responseJSON.job || {};",
                  "",
                  "tests['Job has \"title\" property'] = job.hasOwnProperty('title');",
                  "tests['Job has \"slug\" property'] = job.hasOwnProperty('slug');",
                  "tests['Job has \"body\" property'] = job.hasOwnProperty('body');",
                  "tests['Job has \"createdAt\" property'] = job.hasOwnProperty('createdAt');",
                  "tests['Job\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(job.createdAt).toISOString() === job.createdAt;",
                  "tests['Job has \"updatedAt\" property'] = job.hasOwnProperty('updatedAt');",
                  "tests['Job\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(job.updatedAt).toISOString() === job.updatedAt;",
                  "tests['Job has \"description\" property'] = job.hasOwnProperty('description');",
                  "tests['Job has \"tagList\" property'] = job.hasOwnProperty('tagList');",
                  "tests['Job\\'s \"tagList\" property is an Array'] = Array.isArray(job.tagList);",
                  "tests['Job has \"author\" property'] = job.hasOwnProperty('author');",
                  "tests['Job has \"favorited\" property'] = job.hasOwnProperty('favorited');",
                  "tests['Job has \"favoritesCount\" property'] = job.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(job.favoritesCount);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/jobs/{{slug}}",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Images",
      "description": "",
      "item": [
        {
          "name": "All Images for Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"images\" property'] = responseJSON.hasOwnProperty('images');",
                  "",
                  "    if(responseJSON.images.length){",
                  "        var image = responseJSON.images[0];",
                  "",
                  "        tests['Image has \"id\" property'] = image.hasOwnProperty('id');",
                  "        tests['Image has \"body\" property'] = image.hasOwnProperty('body');",
                  "        tests['Image has \"createdAt\" property'] = image.hasOwnProperty('createdAt');",
                  "        tests['\"createdAt\" property is an ISO 8601 timestamp'] = new Date(image.createdAt).toISOString() === image.createdAt;",
                  "        tests['Image has \"updatedAt\" property'] = image.hasOwnProperty('updatedAt');",
                  "        tests['\"updatedAt\" property is an ISO 8601 timestamp'] = new Date(image.updatedAt).toISOString() === image.updatedAt;",
                  "        tests['Image has \"author\" property'] = image.hasOwnProperty('author');",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/jobs/{{slug}}/images",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Image for Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"image\" property'] = responseJSON.hasOwnProperty('image');",
                  "",
                  "var image = responseJSON.image || {};",
                  "",
                  "tests['Image has \"id\" property'] = image.hasOwnProperty('id');",
                  "tests['Image has \"body\" property'] = image.hasOwnProperty('body');",
                  "tests['Image has \"createdAt\" property'] = image.hasOwnProperty('createdAt');",
                  "tests['\"createdAt\" property is an ISO 8601 timestamp'] = new Date(image.createdAt).toISOString() === image.createdAt;",
                  "tests['Image has \"author\" property'] = image.hasOwnProperty('author');",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/jobs/{{slug}}/images",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"image\":{\"body\":\"Thank you so much!\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Delete Image for Job",
          "request": {
            "url": "{{apiUrl}}/jobs/{{slug}}/images/1",
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Profiles",
      "description": "",
      "item": [
        {
          "name": "Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                  "    ",
                  "    var profile = responseJSON.profile || {};",
                  "    ",
                  "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                  "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                  "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                  "}",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/profiles/johnjacob",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Follow Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                  "    ",
                  "    var profile = responseJSON.profile || {};",
                  "    ",
                  "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                  "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                  "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                  "    tests['Profile\\'s \"following\" property is true'] = profile.following === true;",
                  "}",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/profiles/johnjacob/follow",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"john@jacob.com\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Unfollow Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                  "    ",
                  "    var profile = responseJSON.profile || {};",
                  "    ",
                  "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                  "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                  "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                  "    tests['Profile\\'s \"following\" property is false'] = profile.following === false;",
                  "}",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/profiles/johnjacob/follow",
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tags",
      "description": "",
      "item": [
        {
          "name": "All Tags",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "    ",
                  "    tests['Response contains \"tags\" property'] = responseJSON.hasOwnProperty('tags');",
                  "    tests['\"tags\" property returned as array'] = Array.isArray(responseJSON.tags);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{apiUrl}}/tags",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Cleanup",
      "description": "",
      "item": [
        {
          "name": "Delete Job",
          "request": {
            "url": "{{apiUrl}}/jobs/{{slug}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    }
  ]
}
